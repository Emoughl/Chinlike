#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Chinlike.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Chinlike")]
	public partial class DataChinlikeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertChiTietDonHang(ChiTietDonHang instance);
    partial void UpdateChiTietDonHang(ChiTietDonHang instance);
    partial void DeleteChiTietDonHang(ChiTietDonHang instance);
    partial void InsertDanhMuc(DanhMuc instance);
    partial void UpdateDanhMuc(DanhMuc instance);
    partial void DeleteDanhMuc(DanhMuc instance);
    partial void InsertDonDatHang(DonDatHang instance);
    partial void UpdateDonDatHang(DonDatHang instance);
    partial void DeleteDonDatHang(DonDatHang instance);
    partial void InsertGia(Gia instance);
    partial void UpdateGia(Gia instance);
    partial void DeleteGia(Gia instance);
    partial void InsertGiaDo(GiaDo instance);
    partial void UpdateGiaDo(GiaDo instance);
    partial void DeleteGiaDo(GiaDo instance);
    partial void InsertIdHot(IdHot instance);
    partial void UpdateIdHot(IdHot instance);
    partial void DeleteIdHot(IdHot instance);
    partial void InsertIDNew(IDNew instance);
    partial void UpdateIDNew(IDNew instance);
    partial void DeleteIDNew(IDNew instance);
    partial void InsertIdTinTuc(IdTinTuc instance);
    partial void UpdateIdTinTuc(IdTinTuc instance);
    partial void DeleteIdTinTuc(IdTinTuc instance);
    partial void InsertKichCo(KichCo instance);
    partial void UpdateKichCo(KichCo instance);
    partial void DeleteKichCo(KichCo instance);
    partial void InsertMain(Main instance);
    partial void UpdateMain(Main instance);
    partial void DeleteMain(Main instance);
    partial void InsertMau(Mau instance);
    partial void UpdateMau(Mau instance);
    partial void DeleteMau(Mau instance);
    partial void InsertMauSac(MauSac instance);
    partial void UpdateMauSac(MauSac instance);
    partial void DeleteMauSac(MauSac instance);
    partial void InsertNew(New instance);
    partial void UpdateNew(New instance);
    partial void DeleteNew(New instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertSize(Size instance);
    partial void UpdateSize(Size instance);
    partial void DeleteSize(Size instance);
    partial void InsertSPHot(SPHot instance);
    partial void UpdateSPHot(SPHot instance);
    partial void DeleteSPHot(SPHot instance);
    partial void InsertTinTuc(TinTuc instance);
    partial void UpdateTinTuc(TinTuc instance);
    partial void DeleteTinTuc(TinTuc instance);
    #endregion
		
		public DataChinlikeDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ChinlikeConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataChinlikeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataChinlikeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataChinlikeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataChinlikeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ChiTietDonHang> ChiTietDonHangs
		{
			get
			{
				return this.GetTable<ChiTietDonHang>();
			}
		}
		
		public System.Data.Linq.Table<DanhMuc> DanhMucs
		{
			get
			{
				return this.GetTable<DanhMuc>();
			}
		}
		
		public System.Data.Linq.Table<DonDatHang> DonDatHangs
		{
			get
			{
				return this.GetTable<DonDatHang>();
			}
		}
		
		public System.Data.Linq.Table<Gia> Gias
		{
			get
			{
				return this.GetTable<Gia>();
			}
		}
		
		public System.Data.Linq.Table<GiaDo> GiaDos
		{
			get
			{
				return this.GetTable<GiaDo>();
			}
		}
		
		public System.Data.Linq.Table<IdHot> IdHots
		{
			get
			{
				return this.GetTable<IdHot>();
			}
		}
		
		public System.Data.Linq.Table<IDNew> IDNews
		{
			get
			{
				return this.GetTable<IDNew>();
			}
		}
		
		public System.Data.Linq.Table<IdTinTuc> IdTinTucs
		{
			get
			{
				return this.GetTable<IdTinTuc>();
			}
		}
		
		public System.Data.Linq.Table<KichCo> KichCos
		{
			get
			{
				return this.GetTable<KichCo>();
			}
		}
		
		public System.Data.Linq.Table<Main> Mains
		{
			get
			{
				return this.GetTable<Main>();
			}
		}
		
		public System.Data.Linq.Table<Mau> Maus
		{
			get
			{
				return this.GetTable<Mau>();
			}
		}
		
		public System.Data.Linq.Table<MauSac> MauSacs
		{
			get
			{
				return this.GetTable<MauSac>();
			}
		}
		
		public System.Data.Linq.Table<New> News
		{
			get
			{
				return this.GetTable<New>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Size> Sizes
		{
			get
			{
				return this.GetTable<Size>();
			}
		}
		
		public System.Data.Linq.Table<SPHot> SPHots
		{
			get
			{
				return this.GetTable<SPHot>();
			}
		}
		
		public System.Data.Linq.Table<TinTuc> TinTucs
		{
			get
			{
				return this.GetTable<TinTuc>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin
	{
		
		private string _UserAdmin;
		
		private string _PassAdmin;
		
		private string _HoTen;
		
		public Admin()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAdmin", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string UserAdmin
		{
			get
			{
				return this._UserAdmin;
			}
			set
			{
				if ((this._UserAdmin != value))
				{
					this._UserAdmin = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassAdmin", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string PassAdmin
		{
			get
			{
				return this._PassAdmin;
			}
			set
			{
				if ((this._PassAdmin != value))
				{
					this._PassAdmin = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoTen", DbType="NVarChar(50)")]
		public string HoTen
		{
			get
			{
				return this._HoTen;
			}
			set
			{
				if ((this._HoTen != value))
				{
					this._HoTen = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaUser;
		
		private string _Email;
		
		private string _MatKhau;
		
		private string _DiaChi;
		
		private string _Sodienthoai;
		
		private EntitySet<DonDatHang> _DonDatHangs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaUserChanging(int value);
    partial void OnMaUserChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMatKhauChanging(string value);
    partial void OnMatKhauChanged();
    partial void OnDiaChiChanging(string value);
    partial void OnDiaChiChanged();
    partial void OnSodienthoaiChanging(string value);
    partial void OnSodienthoaiChanged();
    #endregion
		
		public User()
		{
			this._DonDatHangs = new EntitySet<DonDatHang>(new Action<DonDatHang>(this.attach_DonDatHangs), new Action<DonDatHang>(this.detach_DonDatHangs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaUser", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaUser
		{
			get
			{
				return this._MaUser;
			}
			set
			{
				if ((this._MaUser != value))
				{
					this.OnMaUserChanging(value);
					this.SendPropertyChanging();
					this._MaUser = value;
					this.SendPropertyChanged("MaUser");
					this.OnMaUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatKhau", DbType="VarChar(50)")]
		public string MatKhau
		{
			get
			{
				return this._MatKhau;
			}
			set
			{
				if ((this._MatKhau != value))
				{
					this.OnMatKhauChanging(value);
					this.SendPropertyChanging();
					this._MatKhau = value;
					this.SendPropertyChanged("MatKhau");
					this.OnMatKhauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiaChi", DbType="NVarChar(50)")]
		public string DiaChi
		{
			get
			{
				return this._DiaChi;
			}
			set
			{
				if ((this._DiaChi != value))
				{
					this.OnDiaChiChanging(value);
					this.SendPropertyChanging();
					this._DiaChi = value;
					this.SendPropertyChanged("DiaChi");
					this.OnDiaChiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sodienthoai", DbType="NChar(10)")]
		public string Sodienthoai
		{
			get
			{
				return this._Sodienthoai;
			}
			set
			{
				if ((this._Sodienthoai != value))
				{
					this.OnSodienthoaiChanging(value);
					this.SendPropertyChanging();
					this._Sodienthoai = value;
					this.SendPropertyChanged("Sodienthoai");
					this.OnSodienthoaiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DonDatHang", Storage="_DonDatHangs", ThisKey="MaUser", OtherKey="MaUser")]
		public EntitySet<DonDatHang> DonDatHangs
		{
			get
			{
				return this._DonDatHangs;
			}
			set
			{
				this._DonDatHangs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DonDatHangs(DonDatHang entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_DonDatHangs(DonDatHang entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChiTietDonHang")]
	public partial class ChiTietDonHang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaDonHang;
		
		private int _MaP;
		
		private System.Nullable<int> _SoLuong;
		
		private System.Nullable<decimal> _DonGia;
		
		private EntityRef<DonDatHang> _DonDatHang;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaDonHangChanging(int value);
    partial void OnMaDonHangChanged();
    partial void OnMaPChanging(int value);
    partial void OnMaPChanged();
    partial void OnSoLuongChanging(System.Nullable<int> value);
    partial void OnSoLuongChanged();
    partial void OnDonGiaChanging(System.Nullable<decimal> value);
    partial void OnDonGiaChanged();
    #endregion
		
		public ChiTietDonHang()
		{
			this._DonDatHang = default(EntityRef<DonDatHang>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaDonHang", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaDonHang
		{
			get
			{
				return this._MaDonHang;
			}
			set
			{
				if ((this._MaDonHang != value))
				{
					if (this._DonDatHang.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaDonHangChanging(value);
					this.SendPropertyChanging();
					this._MaDonHang = value;
					this.SendPropertyChanged("MaDonHang");
					this.OnMaDonHangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaP", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaP
		{
			get
			{
				return this._MaP;
			}
			set
			{
				if ((this._MaP != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaPChanging(value);
					this.SendPropertyChanging();
					this._MaP = value;
					this.SendPropertyChanged("MaP");
					this.OnMaPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoLuong", DbType="Int")]
		public System.Nullable<int> SoLuong
		{
			get
			{
				return this._SoLuong;
			}
			set
			{
				if ((this._SoLuong != value))
				{
					this.OnSoLuongChanging(value);
					this.SendPropertyChanging();
					this._SoLuong = value;
					this.SendPropertyChanged("SoLuong");
					this.OnSoLuongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonGia", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> DonGia
		{
			get
			{
				return this._DonGia;
			}
			set
			{
				if ((this._DonGia != value))
				{
					this.OnDonGiaChanging(value);
					this.SendPropertyChanging();
					this._DonGia = value;
					this.SendPropertyChanged("DonGia");
					this.OnDonGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DonDatHang_ChiTietDonHang", Storage="_DonDatHang", ThisKey="MaDonHang", OtherKey="MaDonHang", IsForeignKey=true)]
		public DonDatHang DonDatHang
		{
			get
			{
				return this._DonDatHang.Entity;
			}
			set
			{
				DonDatHang previousValue = this._DonDatHang.Entity;
				if (((previousValue != value) 
							|| (this._DonDatHang.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DonDatHang.Entity = null;
						previousValue.ChiTietDonHangs.Remove(this);
					}
					this._DonDatHang.Entity = value;
					if ((value != null))
					{
						value.ChiTietDonHangs.Add(this);
						this._MaDonHang = value.MaDonHang;
					}
					else
					{
						this._MaDonHang = default(int);
					}
					this.SendPropertyChanged("DonDatHang");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ChiTietDonHang", Storage="_Product", ThisKey="MaP", OtherKey="MaP", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ChiTietDonHangs.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ChiTietDonHangs.Add(this);
						this._MaP = value.MaP;
					}
					else
					{
						this._MaP = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DanhMuc")]
	public partial class DanhMuc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaDM;
		
		private string _TenDM;
		
		private EntitySet<Main> _Mains;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaDMChanging(int value);
    partial void OnMaDMChanged();
    partial void OnTenDMChanging(string value);
    partial void OnTenDMChanged();
    #endregion
		
		public DanhMuc()
		{
			this._Mains = new EntitySet<Main>(new Action<Main>(this.attach_Mains), new Action<Main>(this.detach_Mains));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaDM", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaDM
		{
			get
			{
				return this._MaDM;
			}
			set
			{
				if ((this._MaDM != value))
				{
					this.OnMaDMChanging(value);
					this.SendPropertyChanging();
					this._MaDM = value;
					this.SendPropertyChanged("MaDM");
					this.OnMaDMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenDM", DbType="NVarChar(50)")]
		public string TenDM
		{
			get
			{
				return this._TenDM;
			}
			set
			{
				if ((this._TenDM != value))
				{
					this.OnTenDMChanging(value);
					this.SendPropertyChanging();
					this._TenDM = value;
					this.SendPropertyChanged("TenDM");
					this.OnTenDMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DanhMuc_Main", Storage="_Mains", ThisKey="MaDM", OtherKey="MaDM")]
		public EntitySet<Main> Mains
		{
			get
			{
				return this._Mains;
			}
			set
			{
				this._Mains.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Mains(Main entity)
		{
			this.SendPropertyChanging();
			entity.DanhMuc = this;
		}
		
		private void detach_Mains(Main entity)
		{
			this.SendPropertyChanging();
			entity.DanhMuc = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DonDatHang")]
	public partial class DonDatHang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaDonHang;
		
		private System.Nullable<bool> _DaThanhToan;
		
		private System.Nullable<bool> _TinhTrangGiaoHang;
		
		private System.Nullable<System.DateTime> _NgayDat;
		
		private System.Nullable<System.DateTime> _NgayGiao;
		
		private System.Nullable<int> _MaUser;
		
		private EntitySet<ChiTietDonHang> _ChiTietDonHangs;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaDonHangChanging(int value);
    partial void OnMaDonHangChanged();
    partial void OnDaThanhToanChanging(System.Nullable<bool> value);
    partial void OnDaThanhToanChanged();
    partial void OnTinhTrangGiaoHangChanging(System.Nullable<bool> value);
    partial void OnTinhTrangGiaoHangChanged();
    partial void OnNgayDatChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayDatChanged();
    partial void OnNgayGiaoChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayGiaoChanged();
    partial void OnMaUserChanging(System.Nullable<int> value);
    partial void OnMaUserChanged();
    #endregion
		
		public DonDatHang()
		{
			this._ChiTietDonHangs = new EntitySet<ChiTietDonHang>(new Action<ChiTietDonHang>(this.attach_ChiTietDonHangs), new Action<ChiTietDonHang>(this.detach_ChiTietDonHangs));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaDonHang", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaDonHang
		{
			get
			{
				return this._MaDonHang;
			}
			set
			{
				if ((this._MaDonHang != value))
				{
					this.OnMaDonHangChanging(value);
					this.SendPropertyChanging();
					this._MaDonHang = value;
					this.SendPropertyChanged("MaDonHang");
					this.OnMaDonHangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaThanhToan", DbType="Bit")]
		public System.Nullable<bool> DaThanhToan
		{
			get
			{
				return this._DaThanhToan;
			}
			set
			{
				if ((this._DaThanhToan != value))
				{
					this.OnDaThanhToanChanging(value);
					this.SendPropertyChanging();
					this._DaThanhToan = value;
					this.SendPropertyChanged("DaThanhToan");
					this.OnDaThanhToanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TinhTrangGiaoHang", DbType="Bit")]
		public System.Nullable<bool> TinhTrangGiaoHang
		{
			get
			{
				return this._TinhTrangGiaoHang;
			}
			set
			{
				if ((this._TinhTrangGiaoHang != value))
				{
					this.OnTinhTrangGiaoHangChanging(value);
					this.SendPropertyChanging();
					this._TinhTrangGiaoHang = value;
					this.SendPropertyChanged("TinhTrangGiaoHang");
					this.OnTinhTrangGiaoHangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayDat", DbType="DateTime")]
		public System.Nullable<System.DateTime> NgayDat
		{
			get
			{
				return this._NgayDat;
			}
			set
			{
				if ((this._NgayDat != value))
				{
					this.OnNgayDatChanging(value);
					this.SendPropertyChanging();
					this._NgayDat = value;
					this.SendPropertyChanged("NgayDat");
					this.OnNgayDatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayGiao", DbType="DateTime")]
		public System.Nullable<System.DateTime> NgayGiao
		{
			get
			{
				return this._NgayGiao;
			}
			set
			{
				if ((this._NgayGiao != value))
				{
					this.OnNgayGiaoChanging(value);
					this.SendPropertyChanging();
					this._NgayGiao = value;
					this.SendPropertyChanged("NgayGiao");
					this.OnNgayGiaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaUser", DbType="Int")]
		public System.Nullable<int> MaUser
		{
			get
			{
				return this._MaUser;
			}
			set
			{
				if ((this._MaUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaUserChanging(value);
					this.SendPropertyChanging();
					this._MaUser = value;
					this.SendPropertyChanged("MaUser");
					this.OnMaUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DonDatHang_ChiTietDonHang", Storage="_ChiTietDonHangs", ThisKey="MaDonHang", OtherKey="MaDonHang")]
		public EntitySet<ChiTietDonHang> ChiTietDonHangs
		{
			get
			{
				return this._ChiTietDonHangs;
			}
			set
			{
				this._ChiTietDonHangs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DonDatHang", Storage="_User", ThisKey="MaUser", OtherKey="MaUser", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.DonDatHangs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.DonDatHangs.Add(this);
						this._MaUser = value.MaUser;
					}
					else
					{
						this._MaUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChiTietDonHangs(ChiTietDonHang entity)
		{
			this.SendPropertyChanging();
			entity.DonDatHang = this;
		}
		
		private void detach_ChiTietDonHangs(ChiTietDonHang entity)
		{
			this.SendPropertyChanging();
			entity.DonDatHang = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gia")]
	public partial class Gia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaGia;
		
		private string _GiaCa;
		
		private EntitySet<GiaDo> _GiaDos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaGiaChanging(int value);
    partial void OnMaGiaChanged();
    partial void OnGiaCaChanging(string value);
    partial void OnGiaCaChanged();
    #endregion
		
		public Gia()
		{
			this._GiaDos = new EntitySet<GiaDo>(new Action<GiaDo>(this.attach_GiaDos), new Action<GiaDo>(this.detach_GiaDos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaGia", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaGia
		{
			get
			{
				return this._MaGia;
			}
			set
			{
				if ((this._MaGia != value))
				{
					this.OnMaGiaChanging(value);
					this.SendPropertyChanging();
					this._MaGia = value;
					this.SendPropertyChanged("MaGia");
					this.OnMaGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiaCa", DbType="NVarChar(50)")]
		public string GiaCa
		{
			get
			{
				return this._GiaCa;
			}
			set
			{
				if ((this._GiaCa != value))
				{
					this.OnGiaCaChanging(value);
					this.SendPropertyChanging();
					this._GiaCa = value;
					this.SendPropertyChanged("GiaCa");
					this.OnGiaCaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gia_GiaDo", Storage="_GiaDos", ThisKey="MaGia", OtherKey="MaGia")]
		public EntitySet<GiaDo> GiaDos
		{
			get
			{
				return this._GiaDos;
			}
			set
			{
				this._GiaDos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GiaDos(GiaDo entity)
		{
			this.SendPropertyChanging();
			entity.Gia = this;
		}
		
		private void detach_GiaDos(GiaDo entity)
		{
			this.SendPropertyChanging();
			entity.Gia = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GiaDo")]
	public partial class GiaDo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdGia;
		
		private System.Nullable<int> _MaGia;
		
		private System.Nullable<int> _MaP;
		
		private EntityRef<Gia> _Gia;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdGiaChanging(int value);
    partial void OnIdGiaChanged();
    partial void OnMaGiaChanging(System.Nullable<int> value);
    partial void OnMaGiaChanged();
    partial void OnMaPChanging(System.Nullable<int> value);
    partial void OnMaPChanged();
    #endregion
		
		public GiaDo()
		{
			this._Gia = default(EntityRef<Gia>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdGia", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdGia
		{
			get
			{
				return this._IdGia;
			}
			set
			{
				if ((this._IdGia != value))
				{
					this.OnIdGiaChanging(value);
					this.SendPropertyChanging();
					this._IdGia = value;
					this.SendPropertyChanged("IdGia");
					this.OnIdGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaGia", DbType="Int")]
		public System.Nullable<int> MaGia
		{
			get
			{
				return this._MaGia;
			}
			set
			{
				if ((this._MaGia != value))
				{
					if (this._Gia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaGiaChanging(value);
					this.SendPropertyChanging();
					this._MaGia = value;
					this.SendPropertyChanged("MaGia");
					this.OnMaGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaP", DbType="Int")]
		public System.Nullable<int> MaP
		{
			get
			{
				return this._MaP;
			}
			set
			{
				if ((this._MaP != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaPChanging(value);
					this.SendPropertyChanging();
					this._MaP = value;
					this.SendPropertyChanged("MaP");
					this.OnMaPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gia_GiaDo", Storage="_Gia", ThisKey="MaGia", OtherKey="MaGia", IsForeignKey=true)]
		public Gia Gia
		{
			get
			{
				return this._Gia.Entity;
			}
			set
			{
				Gia previousValue = this._Gia.Entity;
				if (((previousValue != value) 
							|| (this._Gia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gia.Entity = null;
						previousValue.GiaDos.Remove(this);
					}
					this._Gia.Entity = value;
					if ((value != null))
					{
						value.GiaDos.Add(this);
						this._MaGia = value.MaGia;
					}
					else
					{
						this._MaGia = default(Nullable<int>);
					}
					this.SendPropertyChanged("Gia");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_GiaDo", Storage="_Product", ThisKey="MaP", OtherKey="MaP", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.GiaDos.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.GiaDos.Add(this);
						this._MaP = value.MaP;
					}
					else
					{
						this._MaP = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IdHot")]
	public partial class IdHot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaHot;
		
		private System.Nullable<int> _MaSPHot;
		
		private System.Nullable<int> _MaP;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<SPHot> _SPHot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaHotChanging(int value);
    partial void OnMaHotChanged();
    partial void OnMaSPHotChanging(System.Nullable<int> value);
    partial void OnMaSPHotChanged();
    partial void OnMaPChanging(System.Nullable<int> value);
    partial void OnMaPChanged();
    #endregion
		
		public IdHot()
		{
			this._Product = default(EntityRef<Product>);
			this._SPHot = default(EntityRef<SPHot>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaHot", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaHot
		{
			get
			{
				return this._MaHot;
			}
			set
			{
				if ((this._MaHot != value))
				{
					this.OnMaHotChanging(value);
					this.SendPropertyChanging();
					this._MaHot = value;
					this.SendPropertyChanged("MaHot");
					this.OnMaHotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaSPHot", DbType="Int")]
		public System.Nullable<int> MaSPHot
		{
			get
			{
				return this._MaSPHot;
			}
			set
			{
				if ((this._MaSPHot != value))
				{
					if (this._SPHot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaSPHotChanging(value);
					this.SendPropertyChanging();
					this._MaSPHot = value;
					this.SendPropertyChanged("MaSPHot");
					this.OnMaSPHotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaP", DbType="Int")]
		public System.Nullable<int> MaP
		{
			get
			{
				return this._MaP;
			}
			set
			{
				if ((this._MaP != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaPChanging(value);
					this.SendPropertyChanging();
					this._MaP = value;
					this.SendPropertyChanged("MaP");
					this.OnMaPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_IdHot", Storage="_Product", ThisKey="MaP", OtherKey="MaP", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.IdHots.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.IdHots.Add(this);
						this._MaP = value.MaP;
					}
					else
					{
						this._MaP = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SPHot_IdHot", Storage="_SPHot", ThisKey="MaSPHot", OtherKey="MaSPHot", IsForeignKey=true)]
		public SPHot SPHot
		{
			get
			{
				return this._SPHot.Entity;
			}
			set
			{
				SPHot previousValue = this._SPHot.Entity;
				if (((previousValue != value) 
							|| (this._SPHot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SPHot.Entity = null;
						previousValue.IdHots.Remove(this);
					}
					this._SPHot.Entity = value;
					if ((value != null))
					{
						value.IdHots.Add(this);
						this._MaSPHot = value.MaSPHot;
					}
					else
					{
						this._MaSPHot = default(Nullable<int>);
					}
					this.SendPropertyChanged("SPHot");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IDNew")]
	public partial class IDNew : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDNew1;
		
		private System.Nullable<int> _MaNew;
		
		private System.Nullable<int> _MaP;
		
		private EntityRef<New> _New;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDNew1Changing(int value);
    partial void OnIDNew1Changed();
    partial void OnMaNewChanging(System.Nullable<int> value);
    partial void OnMaNewChanged();
    partial void OnMaPChanging(System.Nullable<int> value);
    partial void OnMaPChanged();
    #endregion
		
		public IDNew()
		{
			this._New = default(EntityRef<New>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="IDNew", Storage="_IDNew1", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDNew1
		{
			get
			{
				return this._IDNew1;
			}
			set
			{
				if ((this._IDNew1 != value))
				{
					this.OnIDNew1Changing(value);
					this.SendPropertyChanging();
					this._IDNew1 = value;
					this.SendPropertyChanged("IDNew1");
					this.OnIDNew1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaNew", DbType="Int")]
		public System.Nullable<int> MaNew
		{
			get
			{
				return this._MaNew;
			}
			set
			{
				if ((this._MaNew != value))
				{
					if (this._New.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaNewChanging(value);
					this.SendPropertyChanging();
					this._MaNew = value;
					this.SendPropertyChanged("MaNew");
					this.OnMaNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaP", DbType="Int")]
		public System.Nullable<int> MaP
		{
			get
			{
				return this._MaP;
			}
			set
			{
				if ((this._MaP != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaPChanging(value);
					this.SendPropertyChanging();
					this._MaP = value;
					this.SendPropertyChanged("MaP");
					this.OnMaPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_IDNew", Storage="_New", ThisKey="MaNew", OtherKey="MaNew", IsForeignKey=true)]
		public New New
		{
			get
			{
				return this._New.Entity;
			}
			set
			{
				New previousValue = this._New.Entity;
				if (((previousValue != value) 
							|| (this._New.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._New.Entity = null;
						previousValue.IDNews.Remove(this);
					}
					this._New.Entity = value;
					if ((value != null))
					{
						value.IDNews.Add(this);
						this._MaNew = value.MaNew;
					}
					else
					{
						this._MaNew = default(Nullable<int>);
					}
					this.SendPropertyChanged("New");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_IDNew", Storage="_Product", ThisKey="MaP", OtherKey="MaP", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.IDNews.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.IDNews.Add(this);
						this._MaP = value.MaP;
					}
					else
					{
						this._MaP = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IdTinTuc")]
	public partial class IdTinTuc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTinTuc1;
		
		private System.Nullable<int> _MaTinTuc;
		
		private System.Nullable<int> _MaP;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<TinTuc> _TinTuc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTinTuc1Changing(int value);
    partial void OnIdTinTuc1Changed();
    partial void OnMaTinTucChanging(System.Nullable<int> value);
    partial void OnMaTinTucChanged();
    partial void OnMaPChanging(System.Nullable<int> value);
    partial void OnMaPChanged();
    #endregion
		
		public IdTinTuc()
		{
			this._Product = default(EntityRef<Product>);
			this._TinTuc = default(EntityRef<TinTuc>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="IdTinTuc", Storage="_IdTinTuc1", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdTinTuc1
		{
			get
			{
				return this._IdTinTuc1;
			}
			set
			{
				if ((this._IdTinTuc1 != value))
				{
					this.OnIdTinTuc1Changing(value);
					this.SendPropertyChanging();
					this._IdTinTuc1 = value;
					this.SendPropertyChanged("IdTinTuc1");
					this.OnIdTinTuc1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaTinTuc", DbType="Int")]
		public System.Nullable<int> MaTinTuc
		{
			get
			{
				return this._MaTinTuc;
			}
			set
			{
				if ((this._MaTinTuc != value))
				{
					if (this._TinTuc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaTinTucChanging(value);
					this.SendPropertyChanging();
					this._MaTinTuc = value;
					this.SendPropertyChanged("MaTinTuc");
					this.OnMaTinTucChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaP", DbType="Int")]
		public System.Nullable<int> MaP
		{
			get
			{
				return this._MaP;
			}
			set
			{
				if ((this._MaP != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaPChanging(value);
					this.SendPropertyChanging();
					this._MaP = value;
					this.SendPropertyChanged("MaP");
					this.OnMaPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_IdTinTuc", Storage="_Product", ThisKey="MaP", OtherKey="MaP", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.IdTinTucs.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.IdTinTucs.Add(this);
						this._MaP = value.MaP;
					}
					else
					{
						this._MaP = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TinTuc_IdTinTuc", Storage="_TinTuc", ThisKey="MaTinTuc", OtherKey="MaTinTuc", IsForeignKey=true)]
		public TinTuc TinTuc
		{
			get
			{
				return this._TinTuc.Entity;
			}
			set
			{
				TinTuc previousValue = this._TinTuc.Entity;
				if (((previousValue != value) 
							|| (this._TinTuc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TinTuc.Entity = null;
						previousValue.IdTinTucs.Remove(this);
					}
					this._TinTuc.Entity = value;
					if ((value != null))
					{
						value.IdTinTucs.Add(this);
						this._MaTinTuc = value.MaTinTuc;
					}
					else
					{
						this._MaTinTuc = default(Nullable<int>);
					}
					this.SendPropertyChanged("TinTuc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KichCo")]
	public partial class KichCo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaKC;
		
		private string _TenKC;
		
		private EntitySet<Size> _Sizes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaKCChanging(int value);
    partial void OnMaKCChanged();
    partial void OnTenKCChanging(string value);
    partial void OnTenKCChanged();
    #endregion
		
		public KichCo()
		{
			this._Sizes = new EntitySet<Size>(new Action<Size>(this.attach_Sizes), new Action<Size>(this.detach_Sizes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaKC", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaKC
		{
			get
			{
				return this._MaKC;
			}
			set
			{
				if ((this._MaKC != value))
				{
					this.OnMaKCChanging(value);
					this.SendPropertyChanging();
					this._MaKC = value;
					this.SendPropertyChanged("MaKC");
					this.OnMaKCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenKC", DbType="NVarChar(50)")]
		public string TenKC
		{
			get
			{
				return this._TenKC;
			}
			set
			{
				if ((this._TenKC != value))
				{
					this.OnTenKCChanging(value);
					this.SendPropertyChanging();
					this._TenKC = value;
					this.SendPropertyChanged("TenKC");
					this.OnTenKCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KichCo_Size", Storage="_Sizes", ThisKey="MaKC", OtherKey="MaKC")]
		public EntitySet<Size> Sizes
		{
			get
			{
				return this._Sizes;
			}
			set
			{
				this._Sizes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sizes(Size entity)
		{
			this.SendPropertyChanging();
			entity.KichCo = this;
		}
		
		private void detach_Sizes(Size entity)
		{
			this.SendPropertyChanging();
			entity.KichCo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Main")]
	public partial class Main : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaMain;
		
		private System.Nullable<int> _MaDM;
		
		private System.Nullable<int> _MaP;
		
		private EntityRef<DanhMuc> _DanhMuc;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaMainChanging(int value);
    partial void OnMaMainChanged();
    partial void OnMaDMChanging(System.Nullable<int> value);
    partial void OnMaDMChanged();
    partial void OnMaPChanging(System.Nullable<int> value);
    partial void OnMaPChanged();
    #endregion
		
		public Main()
		{
			this._DanhMuc = default(EntityRef<DanhMuc>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaMain", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaMain
		{
			get
			{
				return this._MaMain;
			}
			set
			{
				if ((this._MaMain != value))
				{
					this.OnMaMainChanging(value);
					this.SendPropertyChanging();
					this._MaMain = value;
					this.SendPropertyChanged("MaMain");
					this.OnMaMainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaDM", DbType="Int")]
		public System.Nullable<int> MaDM
		{
			get
			{
				return this._MaDM;
			}
			set
			{
				if ((this._MaDM != value))
				{
					if (this._DanhMuc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaDMChanging(value);
					this.SendPropertyChanging();
					this._MaDM = value;
					this.SendPropertyChanged("MaDM");
					this.OnMaDMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaP", DbType="Int")]
		public System.Nullable<int> MaP
		{
			get
			{
				return this._MaP;
			}
			set
			{
				if ((this._MaP != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaPChanging(value);
					this.SendPropertyChanging();
					this._MaP = value;
					this.SendPropertyChanged("MaP");
					this.OnMaPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DanhMuc_Main", Storage="_DanhMuc", ThisKey="MaDM", OtherKey="MaDM", IsForeignKey=true)]
		public DanhMuc DanhMuc
		{
			get
			{
				return this._DanhMuc.Entity;
			}
			set
			{
				DanhMuc previousValue = this._DanhMuc.Entity;
				if (((previousValue != value) 
							|| (this._DanhMuc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DanhMuc.Entity = null;
						previousValue.Mains.Remove(this);
					}
					this._DanhMuc.Entity = value;
					if ((value != null))
					{
						value.Mains.Add(this);
						this._MaDM = value.MaDM;
					}
					else
					{
						this._MaDM = default(Nullable<int>);
					}
					this.SendPropertyChanged("DanhMuc");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Main", Storage="_Product", ThisKey="MaP", OtherKey="MaP", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Mains.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Mains.Add(this);
						this._MaP = value.MaP;
					}
					else
					{
						this._MaP = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mau")]
	public partial class Mau : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdMau;
		
		private System.Nullable<int> _MaMau;
		
		private System.Nullable<int> _MaP;
		
		private EntityRef<MauSac> _MauSac;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdMauChanging(int value);
    partial void OnIdMauChanged();
    partial void OnMaMauChanging(System.Nullable<int> value);
    partial void OnMaMauChanged();
    partial void OnMaPChanging(System.Nullable<int> value);
    partial void OnMaPChanged();
    #endregion
		
		public Mau()
		{
			this._MauSac = default(EntityRef<MauSac>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMau", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdMau
		{
			get
			{
				return this._IdMau;
			}
			set
			{
				if ((this._IdMau != value))
				{
					this.OnIdMauChanging(value);
					this.SendPropertyChanging();
					this._IdMau = value;
					this.SendPropertyChanged("IdMau");
					this.OnIdMauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaMau", DbType="Int")]
		public System.Nullable<int> MaMau
		{
			get
			{
				return this._MaMau;
			}
			set
			{
				if ((this._MaMau != value))
				{
					if (this._MauSac.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaMauChanging(value);
					this.SendPropertyChanging();
					this._MaMau = value;
					this.SendPropertyChanged("MaMau");
					this.OnMaMauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaP", DbType="Int")]
		public System.Nullable<int> MaP
		{
			get
			{
				return this._MaP;
			}
			set
			{
				if ((this._MaP != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaPChanging(value);
					this.SendPropertyChanging();
					this._MaP = value;
					this.SendPropertyChanged("MaP");
					this.OnMaPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MauSac_Mau", Storage="_MauSac", ThisKey="MaMau", OtherKey="MaMau", IsForeignKey=true)]
		public MauSac MauSac
		{
			get
			{
				return this._MauSac.Entity;
			}
			set
			{
				MauSac previousValue = this._MauSac.Entity;
				if (((previousValue != value) 
							|| (this._MauSac.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MauSac.Entity = null;
						previousValue.Maus.Remove(this);
					}
					this._MauSac.Entity = value;
					if ((value != null))
					{
						value.Maus.Add(this);
						this._MaMau = value.MaMau;
					}
					else
					{
						this._MaMau = default(Nullable<int>);
					}
					this.SendPropertyChanged("MauSac");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Mau", Storage="_Product", ThisKey="MaP", OtherKey="MaP", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Maus.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Maus.Add(this);
						this._MaP = value.MaP;
					}
					else
					{
						this._MaP = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MauSac")]
	public partial class MauSac : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaMau;
		
		private string _TenMau;
		
		private EntitySet<Mau> _Maus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaMauChanging(int value);
    partial void OnMaMauChanged();
    partial void OnTenMauChanging(string value);
    partial void OnTenMauChanged();
    #endregion
		
		public MauSac()
		{
			this._Maus = new EntitySet<Mau>(new Action<Mau>(this.attach_Maus), new Action<Mau>(this.detach_Maus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaMau", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaMau
		{
			get
			{
				return this._MaMau;
			}
			set
			{
				if ((this._MaMau != value))
				{
					this.OnMaMauChanging(value);
					this.SendPropertyChanging();
					this._MaMau = value;
					this.SendPropertyChanged("MaMau");
					this.OnMaMauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenMau", DbType="NVarChar(50)")]
		public string TenMau
		{
			get
			{
				return this._TenMau;
			}
			set
			{
				if ((this._TenMau != value))
				{
					this.OnTenMauChanging(value);
					this.SendPropertyChanging();
					this._TenMau = value;
					this.SendPropertyChanged("TenMau");
					this.OnTenMauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MauSac_Mau", Storage="_Maus", ThisKey="MaMau", OtherKey="MaMau")]
		public EntitySet<Mau> Maus
		{
			get
			{
				return this._Maus;
			}
			set
			{
				this._Maus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Maus(Mau entity)
		{
			this.SendPropertyChanging();
			entity.MauSac = this;
		}
		
		private void detach_Maus(Mau entity)
		{
			this.SendPropertyChanging();
			entity.MauSac = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.New")]
	public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaNew;
		
		private string _New1;
		
		private EntitySet<IDNew> _IDNews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaNewChanging(int value);
    partial void OnMaNewChanged();
    partial void OnNew1Changing(string value);
    partial void OnNew1Changed();
    #endregion
		
		public New()
		{
			this._IDNews = new EntitySet<IDNew>(new Action<IDNew>(this.attach_IDNews), new Action<IDNew>(this.detach_IDNews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaNew", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaNew
		{
			get
			{
				return this._MaNew;
			}
			set
			{
				if ((this._MaNew != value))
				{
					this.OnMaNewChanging(value);
					this.SendPropertyChanging();
					this._MaNew = value;
					this.SendPropertyChanged("MaNew");
					this.OnMaNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="New", Storage="_New1", DbType="NVarChar(50)")]
		public string New1
		{
			get
			{
				return this._New1;
			}
			set
			{
				if ((this._New1 != value))
				{
					this.OnNew1Changing(value);
					this.SendPropertyChanging();
					this._New1 = value;
					this.SendPropertyChanged("New1");
					this.OnNew1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_IDNew", Storage="_IDNews", ThisKey="MaNew", OtherKey="MaNew")]
		public EntitySet<IDNew> IDNews
		{
			get
			{
				return this._IDNews;
			}
			set
			{
				this._IDNews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IDNews(IDNew entity)
		{
			this.SendPropertyChanging();
			entity.New = this;
		}
		
		private void detach_IDNews(IDNew entity)
		{
			this.SendPropertyChanging();
			entity.New = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaP;
		
		private string _TenP;
		
		private string _MoTa;
		
		private string _Anh;
		
		private string _Gia;
		
		private string _SoLuong;
		
		private System.Nullable<System.DateTime> _NgayCapNhat;
		
		private EntitySet<ChiTietDonHang> _ChiTietDonHangs;
		
		private EntitySet<GiaDo> _GiaDos;
		
		private EntitySet<IdHot> _IdHots;
		
		private EntitySet<IDNew> _IDNews;
		
		private EntitySet<IdTinTuc> _IdTinTucs;
		
		private EntitySet<Main> _Mains;
		
		private EntitySet<Mau> _Maus;
		
		private EntitySet<Size> _Sizes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaPChanging(int value);
    partial void OnMaPChanged();
    partial void OnTenPChanging(string value);
    partial void OnTenPChanged();
    partial void OnMoTaChanging(string value);
    partial void OnMoTaChanged();
    partial void OnAnhChanging(string value);
    partial void OnAnhChanged();
    partial void OnGiaChanging(string value);
    partial void OnGiaChanged();
    partial void OnSoLuongChanging(string value);
    partial void OnSoLuongChanged();
    partial void OnNgayCapNhatChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayCapNhatChanged();
    #endregion
		
		public Product()
		{
			this._ChiTietDonHangs = new EntitySet<ChiTietDonHang>(new Action<ChiTietDonHang>(this.attach_ChiTietDonHangs), new Action<ChiTietDonHang>(this.detach_ChiTietDonHangs));
			this._GiaDos = new EntitySet<GiaDo>(new Action<GiaDo>(this.attach_GiaDos), new Action<GiaDo>(this.detach_GiaDos));
			this._IdHots = new EntitySet<IdHot>(new Action<IdHot>(this.attach_IdHots), new Action<IdHot>(this.detach_IdHots));
			this._IDNews = new EntitySet<IDNew>(new Action<IDNew>(this.attach_IDNews), new Action<IDNew>(this.detach_IDNews));
			this._IdTinTucs = new EntitySet<IdTinTuc>(new Action<IdTinTuc>(this.attach_IdTinTucs), new Action<IdTinTuc>(this.detach_IdTinTucs));
			this._Mains = new EntitySet<Main>(new Action<Main>(this.attach_Mains), new Action<Main>(this.detach_Mains));
			this._Maus = new EntitySet<Mau>(new Action<Mau>(this.attach_Maus), new Action<Mau>(this.detach_Maus));
			this._Sizes = new EntitySet<Size>(new Action<Size>(this.attach_Sizes), new Action<Size>(this.detach_Sizes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaP", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaP
		{
			get
			{
				return this._MaP;
			}
			set
			{
				if ((this._MaP != value))
				{
					this.OnMaPChanging(value);
					this.SendPropertyChanging();
					this._MaP = value;
					this.SendPropertyChanged("MaP");
					this.OnMaPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenP", DbType="NVarChar(100)")]
		public string TenP
		{
			get
			{
				return this._TenP;
			}
			set
			{
				if ((this._TenP != value))
				{
					this.OnTenPChanging(value);
					this.SendPropertyChanging();
					this._TenP = value;
					this.SendPropertyChanged("TenP");
					this.OnTenPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoTa", DbType="NVarChar(MAX)")]
		public string MoTa
		{
			get
			{
				return this._MoTa;
			}
			set
			{
				if ((this._MoTa != value))
				{
					this.OnMoTaChanging(value);
					this.SendPropertyChanging();
					this._MoTa = value;
					this.SendPropertyChanged("MoTa");
					this.OnMoTaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Anh", DbType="NVarChar(50)")]
		public string Anh
		{
			get
			{
				return this._Anh;
			}
			set
			{
				if ((this._Anh != value))
				{
					this.OnAnhChanging(value);
					this.SendPropertyChanging();
					this._Anh = value;
					this.SendPropertyChanged("Anh");
					this.OnAnhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gia", DbType="NVarChar(50)")]
		public string Gia
		{
			get
			{
				return this._Gia;
			}
			set
			{
				if ((this._Gia != value))
				{
					this.OnGiaChanging(value);
					this.SendPropertyChanging();
					this._Gia = value;
					this.SendPropertyChanged("Gia");
					this.OnGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoLuong", DbType="NVarChar(50)")]
		public string SoLuong
		{
			get
			{
				return this._SoLuong;
			}
			set
			{
				if ((this._SoLuong != value))
				{
					this.OnSoLuongChanging(value);
					this.SendPropertyChanging();
					this._SoLuong = value;
					this.SendPropertyChanged("SoLuong");
					this.OnSoLuongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayCapNhat", DbType="DateTime")]
		public System.Nullable<System.DateTime> NgayCapNhat
		{
			get
			{
				return this._NgayCapNhat;
			}
			set
			{
				if ((this._NgayCapNhat != value))
				{
					this.OnNgayCapNhatChanging(value);
					this.SendPropertyChanging();
					this._NgayCapNhat = value;
					this.SendPropertyChanged("NgayCapNhat");
					this.OnNgayCapNhatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ChiTietDonHang", Storage="_ChiTietDonHangs", ThisKey="MaP", OtherKey="MaP")]
		public EntitySet<ChiTietDonHang> ChiTietDonHangs
		{
			get
			{
				return this._ChiTietDonHangs;
			}
			set
			{
				this._ChiTietDonHangs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_GiaDo", Storage="_GiaDos", ThisKey="MaP", OtherKey="MaP")]
		public EntitySet<GiaDo> GiaDos
		{
			get
			{
				return this._GiaDos;
			}
			set
			{
				this._GiaDos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_IdHot", Storage="_IdHots", ThisKey="MaP", OtherKey="MaP")]
		public EntitySet<IdHot> IdHots
		{
			get
			{
				return this._IdHots;
			}
			set
			{
				this._IdHots.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_IDNew", Storage="_IDNews", ThisKey="MaP", OtherKey="MaP")]
		public EntitySet<IDNew> IDNews
		{
			get
			{
				return this._IDNews;
			}
			set
			{
				this._IDNews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_IdTinTuc", Storage="_IdTinTucs", ThisKey="MaP", OtherKey="MaP")]
		public EntitySet<IdTinTuc> IdTinTucs
		{
			get
			{
				return this._IdTinTucs;
			}
			set
			{
				this._IdTinTucs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Main", Storage="_Mains", ThisKey="MaP", OtherKey="MaP")]
		public EntitySet<Main> Mains
		{
			get
			{
				return this._Mains;
			}
			set
			{
				this._Mains.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Mau", Storage="_Maus", ThisKey="MaP", OtherKey="MaP")]
		public EntitySet<Mau> Maus
		{
			get
			{
				return this._Maus;
			}
			set
			{
				this._Maus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Size", Storage="_Sizes", ThisKey="MaP", OtherKey="MaP")]
		public EntitySet<Size> Sizes
		{
			get
			{
				return this._Sizes;
			}
			set
			{
				this._Sizes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChiTietDonHangs(ChiTietDonHang entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ChiTietDonHangs(ChiTietDonHang entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_GiaDos(GiaDo entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_GiaDos(GiaDo entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_IdHots(IdHot entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_IdHots(IdHot entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_IDNews(IDNew entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_IDNews(IDNew entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_IdTinTucs(IdTinTuc entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_IdTinTucs(IdTinTuc entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Mains(Main entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Mains(Main entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Maus(Mau entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Maus(Mau entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Sizes(Size entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Sizes(Size entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Size")]
	public partial class Size : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdSize;
		
		private System.Nullable<int> _MaKC;
		
		private System.Nullable<int> _MaP;
		
		private EntityRef<KichCo> _KichCo;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdSizeChanging(int value);
    partial void OnIdSizeChanged();
    partial void OnMaKCChanging(System.Nullable<int> value);
    partial void OnMaKCChanged();
    partial void OnMaPChanging(System.Nullable<int> value);
    partial void OnMaPChanged();
    #endregion
		
		public Size()
		{
			this._KichCo = default(EntityRef<KichCo>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSize", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdSize
		{
			get
			{
				return this._IdSize;
			}
			set
			{
				if ((this._IdSize != value))
				{
					this.OnIdSizeChanging(value);
					this.SendPropertyChanging();
					this._IdSize = value;
					this.SendPropertyChanged("IdSize");
					this.OnIdSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaKC", DbType="Int")]
		public System.Nullable<int> MaKC
		{
			get
			{
				return this._MaKC;
			}
			set
			{
				if ((this._MaKC != value))
				{
					if (this._KichCo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaKCChanging(value);
					this.SendPropertyChanging();
					this._MaKC = value;
					this.SendPropertyChanged("MaKC");
					this.OnMaKCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaP", DbType="Int")]
		public System.Nullable<int> MaP
		{
			get
			{
				return this._MaP;
			}
			set
			{
				if ((this._MaP != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaPChanging(value);
					this.SendPropertyChanging();
					this._MaP = value;
					this.SendPropertyChanged("MaP");
					this.OnMaPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KichCo_Size", Storage="_KichCo", ThisKey="MaKC", OtherKey="MaKC", IsForeignKey=true)]
		public KichCo KichCo
		{
			get
			{
				return this._KichCo.Entity;
			}
			set
			{
				KichCo previousValue = this._KichCo.Entity;
				if (((previousValue != value) 
							|| (this._KichCo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KichCo.Entity = null;
						previousValue.Sizes.Remove(this);
					}
					this._KichCo.Entity = value;
					if ((value != null))
					{
						value.Sizes.Add(this);
						this._MaKC = value.MaKC;
					}
					else
					{
						this._MaKC = default(Nullable<int>);
					}
					this.SendPropertyChanged("KichCo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Size", Storage="_Product", ThisKey="MaP", OtherKey="MaP", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Sizes.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Sizes.Add(this);
						this._MaP = value.MaP;
					}
					else
					{
						this._MaP = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SPHot")]
	public partial class SPHot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaSPHot;
		
		private string _SPHot1;
		
		private EntitySet<IdHot> _IdHots;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaSPHotChanging(int value);
    partial void OnMaSPHotChanged();
    partial void OnSPHot1Changing(string value);
    partial void OnSPHot1Changed();
    #endregion
		
		public SPHot()
		{
			this._IdHots = new EntitySet<IdHot>(new Action<IdHot>(this.attach_IdHots), new Action<IdHot>(this.detach_IdHots));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaSPHot", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaSPHot
		{
			get
			{
				return this._MaSPHot;
			}
			set
			{
				if ((this._MaSPHot != value))
				{
					this.OnMaSPHotChanging(value);
					this.SendPropertyChanging();
					this._MaSPHot = value;
					this.SendPropertyChanged("MaSPHot");
					this.OnMaSPHotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SPHot", Storage="_SPHot1", DbType="NVarChar(50)")]
		public string SPHot1
		{
			get
			{
				return this._SPHot1;
			}
			set
			{
				if ((this._SPHot1 != value))
				{
					this.OnSPHot1Changing(value);
					this.SendPropertyChanging();
					this._SPHot1 = value;
					this.SendPropertyChanged("SPHot1");
					this.OnSPHot1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SPHot_IdHot", Storage="_IdHots", ThisKey="MaSPHot", OtherKey="MaSPHot")]
		public EntitySet<IdHot> IdHots
		{
			get
			{
				return this._IdHots;
			}
			set
			{
				this._IdHots.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IdHots(IdHot entity)
		{
			this.SendPropertyChanging();
			entity.SPHot = this;
		}
		
		private void detach_IdHots(IdHot entity)
		{
			this.SendPropertyChanging();
			entity.SPHot = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TinTuc")]
	public partial class TinTuc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaTinTuc;
		
		private string _TinTuc1;
		
		private EntitySet<IdTinTuc> _IdTinTucs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaTinTucChanging(int value);
    partial void OnMaTinTucChanged();
    partial void OnTinTuc1Changing(string value);
    partial void OnTinTuc1Changed();
    #endregion
		
		public TinTuc()
		{
			this._IdTinTucs = new EntitySet<IdTinTuc>(new Action<IdTinTuc>(this.attach_IdTinTucs), new Action<IdTinTuc>(this.detach_IdTinTucs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaTinTuc", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaTinTuc
		{
			get
			{
				return this._MaTinTuc;
			}
			set
			{
				if ((this._MaTinTuc != value))
				{
					this.OnMaTinTucChanging(value);
					this.SendPropertyChanging();
					this._MaTinTuc = value;
					this.SendPropertyChanged("MaTinTuc");
					this.OnMaTinTucChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TinTuc", Storage="_TinTuc1", DbType="NVarChar(50)")]
		public string TinTuc1
		{
			get
			{
				return this._TinTuc1;
			}
			set
			{
				if ((this._TinTuc1 != value))
				{
					this.OnTinTuc1Changing(value);
					this.SendPropertyChanging();
					this._TinTuc1 = value;
					this.SendPropertyChanged("TinTuc1");
					this.OnTinTuc1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TinTuc_IdTinTuc", Storage="_IdTinTucs", ThisKey="MaTinTuc", OtherKey="MaTinTuc")]
		public EntitySet<IdTinTuc> IdTinTucs
		{
			get
			{
				return this._IdTinTucs;
			}
			set
			{
				this._IdTinTucs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IdTinTucs(IdTinTuc entity)
		{
			this.SendPropertyChanging();
			entity.TinTuc = this;
		}
		
		private void detach_IdTinTucs(IdTinTuc entity)
		{
			this.SendPropertyChanging();
			entity.TinTuc = null;
		}
	}
}
#pragma warning restore 1591
